{
    "short_correct": "برای بررسی اینکه آیا یک رشته چرخش رشته دیگر است، می‌توان رشته اول را دو بار پشت سر هم تکرار کرد و سپس بررسی کرد که آیا رشته دوم در این رشته جدید وجود دارد یا خیر. مثلاً برای بررسی اینکه آیا «cdab» چرخشی از «abcd» است، «abcd» را دو بار تکرار می‌کنیم: «abcdabcd» و سپس چک می‌کنیم که آیا «cdab» در آن وجود دارد.",
    "long_restricted": "برای بررسی اینکه آیا یک رشته چرخش رشته دیگری محسوب می‌شود، روشی ساده و کارآمد وجود دارد که می‌توان از آن بهره گرفت. در این روش، رشته اول را دو مرتبه به صورت پشت سر هم تکرار می‌نماییم و سپس به جستجوی رشته دوم در این رشته تکرار شده می‌پردازیم. به عنوان نمونه، اگر قصد داریم بررسی کنیم که آیا عبارت «cdab» یک چرخش از عبارت «abcd» است یا خیر، ابتدا عبارت «abcd» را دو بار پشت سر هم قرار می‌دهیم که نتیجه آن عبارت «abcdabcd» خواهد بود. سپس بررسی می‌کنیم که آیا عبارت «cdab» در این رشته جدید که از تکرار عبارت اول حاصل شده است، یافت می‌شود یا خیر. اگر رشته دوم در این عبارت تکرار شده موجود باشد، می‌توان نتیجه گرفت که رشته دوم یک چرخش از رشته اول است. در غیر این صورت، رشته دوم چرخشی از رشته اول نخواهد بود. این روش بسیار ساده و در عین حال کارآمد است و به راحتی می‌توان از آن برای تشخیص چرخش‌های مختلف یک رشته استفاده نمود.",
    "long_unrestricted": "برای بررسی اینکه آیا یک رشته چرخش رشته دیگری است، چند روش وجود دارد. ساده‌ترین و کارآمدترین روش، الگوریتم دوبرابرسازی است. در این روش، رشته اول را دو بار پشت سر هم تکرار کرده و سپس بررسی می‌کنیم که آیا رشته دوم زیررشته‌ای از این رشته جدید است یا خیر. به عنوان مثال، برای بررسی اینکه آیا «cdab» چرخشی از «abcd» است، ابتدا «abcd» را دو بار تکرار می‌کنیم: «abcdabcd». سپس بررسی می‌کنیم که آیا «cdab» در «abcdabcd» وجود دارد، که در این مورد پاسخ مثبت است. این الگوریتم دارای پیچیدگی زمانی O(n) است، که در آن n طول رشته‌هاست. روش دیگر، آزمایش تمام چرخش‌های ممکن رشته اول و مقایسه با رشته دوم است، اما پیچیدگی زمانی این روش O(n²) خواهد بود. نکته مهم دیگر این است که قبل از انجام این بررسی، باید اطمینان حاصل کنیم که طول دو رشته یکسان است، زیرا رشته‌هایی با طول متفاوت نمی‌توانند چرخش یکدیگر باشند. همچنین، در زبان‌های برنامه‌نویسی مختلف، توابع جستجوی زیررشته مانند indexOf در جاوااسکریپت یا find در پایتون می‌توانند برای پیاده‌سازی این الگوریتم مورد استفاده قرار گیرند.",
    "short_incorrect": "برای بررسی اینکه آیا یک رشته چرخش رشته دیگری است، باید تک تک حروف دو رشته را با هم مقایسه کرد. اگر تعداد حروف مشترک بیشتر از نصف طول رشته باشد، می‌توان نتیجه گرفت که یکی چرخش دیگری است. مثلاً «abcd» و «cdab» دارای چهار حرف مشترک هستند، پس یکی چرخش دیگری است.",
    "short_error_explanation": "این روش نادرست است. مقایسه تعداد حروف مشترک معیار درستی نیست. دو رشته «abcd» و «dbca» حروف یکسانی دارند اما چرخش یکدیگر نیستند. روش صحیح، دوبرابر کردن رشته اول و جستجوی رشته دوم در آن است.",
    "long_incorrect": "برای بررسی اینکه آیا یک رشته چرخش رشته دیگری است، می‌توان از روش‌های مختلفی استفاده کرد. ساده‌ترین روش، مقایسه فرکانس حروف در دو رشته است. اگر فرکانس هر حرف در هر دو رشته یکسان باشد، می‌توان نتیجه گرفت که یکی چرخش دیگری است. برای مثال، در رشته‌های «abcd» و «cdab»، هر دو دارای یک «a»، یک «b»، یک «c» و یک «d» هستند، بنابراین «cdab» چرخشی از «abcd» است. روش دیگر، استفاده از الگوریتم KMP (Knuth-Morris-Pratt) است. در این روش، ابتدا رشته اول را دو برابر می‌کنیم و سپس با استفاده از الگوریتم KMP بررسی می‌کنیم که آیا رشته دوم در آن وجود دارد. این الگوریتم دارای پیچیدگی زمانی O(n²) است که در آن n طول رشته است. همچنین می‌توان از روش شیفت دادن استفاده کرد. در این روش، رشته اول را به اندازه یک حرف شیفت می‌دهیم و با رشته دوم مقایسه می‌کنیم. اگر پس از حداکثر n-1 شیفت (که n طول رشته است) به رشته دوم رسیدیم، می‌توان نتیجه گرفت که یکی چرخش دیگری است. این روش دارای پیچیدگی O(n) است و در همه زبان‌های برنامه‌نویسی به راحتی قابل پیاده‌سازی است.",
    "long_error_explanation": "این پاسخ چند اشتباه دارد: صرف یکسان بودن فرکانس حروف برای تشخیص چرخش کافی نیست (مثلاً «abcd» و «dbca»). همچنین الگوریتم KMP پیچیدگی O(n+m) دارد نه O(n²)، و روش دوبرابرسازی نیز O(n) است نه O(n²)."
}