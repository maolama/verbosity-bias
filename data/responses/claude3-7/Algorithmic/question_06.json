{
    "short_correct": "برای پیدا کردن رایج‌ترین حرف در یک رشته متنی، می‌توان از یک دیکشنری (جدول هش) استفاده کرد. ابتدا یک دیکشنری خالی ایجاد کنید. سپس رشته را پیمایش کرده و برای هر حرف، تعداد تکرار آن را در دیکشنری ذخیره کنید. اگر حرفی قبلاً در دیکشنری نبود، آن را با مقدار ۱ اضافه کنید، در غیر این صورت مقدار آن را یک واحد افزایش دهید. در نهایت، کلیدی از دیکشنری که بیشترین مقدار را دارد، رایج‌ترین حرف خواهد بود.",
    "long_restricted": "برای یافتن متداول‌ترین حرف در یک رشته متنی داده شده، می‌توان از یک دیکشنری یا همان جدول هش استفاده نمود. روند اجرای این الگوریتم به این صورت است که در گام نخست، یک دیکشنری خالی ایجاد می‌کنیم. سپس به صورت متوالی، تک تک کاراکترهای موجود در رشته متنی را بررسی کرده و برای هر حرف، فراوانی وقوع آن را در ساختار دیکشنری ثبت و نگهداری می‌نماییم. به این ترتیب که اگر حرفی برای اولین بار مشاهده می‌شود و قبلاً در دیکشنری موجود نبوده است، آن را با مقدار اولیه ۱ به دیکشنری اضافه می‌کنیم. اما اگر حرف مورد نظر قبلاً در دیکشنری ثبت شده باشد، مقدار شمارنده مربوط به آن را یک واحد افزایش می‌دهیم. پس از اتمام پیمایش کامل رشته و شمارش تمامی حروف، کافی است در میان کلیدهای دیکشنری، آن کلیدی را که بیشترین مقدار عددی را به خود اختصاص داده است، شناسایی کنیم. این کلید همان رایج‌ترین و پرتکرارترین حرف در رشته متنی اصلی خواهد بود.",
    "long_unrestricted": "برای یافتن رایج‌ترین حرف در یک رشته متنی، می‌توان از الگوریتم شمارش فراوانی استفاده کرد. مراحل این الگوریتم به شرح زیر است:\n\n1. یک دیکشنری (جدول هش) خالی ایجاد کنید\n2. رشته متنی را کاراکتر به کاراکتر پیمایش کنید\n3. برای هر کاراکتر:\n   - اگر در دیکشنری وجود نداشت، آن را با مقدار 1 اضافه کنید\n   - اگر وجود داشت، مقدار آن را یک واحد افزایش دهید\n4. کلیدی از دیکشنری که بیشترین مقدار را دارد، رایج‌ترین حرف است\n\nدر پیاده‌سازی این الگوریتم، نکات مهمی وجود دارد. اول اینکه باید مشخص کنیم آیا حروف بزرگ و کوچک را یکسان در نظر می‌گیریم یا خیر. اگر تفاوتی قائل نیستیم، می‌توانیم قبل از شمارش، تمام حروف را به حروف کوچک یا بزرگ تبدیل کنیم.\n\nهمچنین باید درباره فضاهای خالی، نقطه‌گذاری‌ها و کاراکترهای خاص تصمیم بگیریم. آیا آن‌ها را در شمارش لحاظ می‌کنیم یا نادیده می‌گیریم؟ یک رویکرد معمول، فیلتر کردن کاراکترهایی است که حرف نیستند.\n\nپیچیدگی زمانی این الگوریتم O(n) است، زیرا فقط یک بار رشته را پیمایش می‌کنیم و عملیات‌های دیکشنری معمولاً در زمان ثابت انجام می‌شوند. پیچیدگی فضایی نیز O(k) است که k حداکثر تعداد کاراکترهای متمایز در رشته است.",
    "short_incorrect": "برای پیدا کردن رایج‌ترین حرف در یک رشته، باید رشته را به حروف تجزیه کرده و سپس آن‌ها را مرتب کنیم. حرفی که بیشترین تکرار را دارد، در یک بخش پیوسته از آرایه مرتب‌شده قرار می‌گیرد. با شمارش طول هر بخش پیوسته، می‌توانیم حرفی با بیشترین تکرار را پیدا کنیم. پیچیدگی زمانی این الگوریتم O(n) است.",
    "short_error_explanation": "مرتب‌سازی پیچیدگی زمانی O(n log n) دارد، نه O(n). روش بهینه‌تر استفاده از دیکشنری یا آرایه شمارش با پیچیدگی O(n) است که نیازی به مرتب‌سازی ندارد.",
    "long_incorrect": "برای پیدا کردن رایج‌ترین حرف در یک رشته متنی، می‌توانیم از الگوریتم شمارش رادیکس استفاده کنیم. این الگوریتم برای شمارش فراوانی کاراکترها بسیار کارآمد است. ابتدا یک آرایه به اندازه 256 (تعداد کاراکترهای اسکی) ایجاد می‌کنیم و تمام عناصر آن را با صفر مقداردهی اولیه می‌کنیم. سپس رشته را پیمایش کرده و برای هر کاراکتر، مقدار خانه متناظر با کد اسکی آن را در آرایه یک واحد افزایش می‌دهیم. در نهایت، بزرگترین مقدار در آرایه را پیدا کرده و اندیس آن را به کاراکتر متناظر تبدیل می‌کنیم. این الگوریتم پیچیدگی زمانی O(n) دارد و برای رشته‌های بسیار بزرگ، سریع‌تر از روش‌های مبتنی بر دیکشنری عمل می‌کند، زیرا نیازی به مدیریت ساختار داده پویا ندارد. همچنین، این روش به دلیل استفاده از آرایه با اندازه ثابت، حافظه کمتری مصرف می‌کند. از مزایای دیگر این روش، امکان تشخیص چندین حرف با بیشترین فراوانی یکسان است، که در برخی کاربردها مانند تحلیل رمزنگاری اهمیت دارد. البته باید توجه داشت که این روش فقط برای متون با کاراکترهای اسکی مناسب است و برای یونیکد باید آرایه بزرگتری در نظر گرفت.",
    "long_error_explanation": "الگوریتم شمارش رادیکس برای مرتب‌سازی استفاده می‌شود، نه برای شمارش فراوانی. آنچه توصیف شده در واقع همان روش آرایه شمارش است. همچنین، ادعای برتری سرعت نسبت به دیکشنری اشتباه است."
}