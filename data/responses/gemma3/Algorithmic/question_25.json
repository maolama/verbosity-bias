{
    "short_correct": "برای بررسی توازن پرانتزها می‌توان از یک پشته (stack) استفاده کرد. هرگاه با پرانتز باز مواجه شدیم، آن را به پشته اضافه می‌کنیم. هرگاه با پرانتز بسته مواجه شدیم، اگر پشته خالی نبود، آخرین پرانتز باز را از پشته حذف می‌کنیم. در نهایت، اگر پشته خالی بود، پرانتزها متوازن هستند. در غیر این صورت، نامتوازن هستند.",
    "long_restricted": "بررسی توازن پرانتزها را می‌توان با بهره‌گیری از ساختار داده‌ای به نام پشته انجام داد. در این روش، هنگامی که به یک پرانتز باز می‌رسیم، آن را به انتهای پشته اضافه می‌کنیم. زمانی که به یک پرانتز بسته برخورد می‌کنیم، اگر پشته خالی نباشد، آخرین پرانتز باز موجود در پشته را حذف می‌کنیم. پس از پردازش کل رشته، اگر پشته خالی باشد، می‌توان نتیجه گرفت که پرانتزها به طور کامل متوازن هستند. در صورتی که پشته پس از پایان پردازش خالی نباشد، به این معناست که رشته‌ی پرانتزی نامتوازن است.",
    "long_unrestricted": "بررسی توازن پرانتزها یکی از مسائل کلاسیک در علوم کامپیوتر است که اغلب در تحلیلگرهای زبان و کامپایلرها کاربرد دارد. روش معمول استفاده از یک پشته است، اما می‌توان از روش‌های دیگری مانند شمارشگرها نیز استفاده کرد. ایده اصلی این است که هر پرانتز باز را به عنوان یک افزایش در 'عمق' پرانتز در نظر بگیریم و هر پرانتز بسته را به عنوان یک کاهش. اگر در هر لحظه 'عمق' منفی شود (یعنی پرانتز بسته قبل از پرانتز باز ظاهر شود)، رشته نامتوازن است. همچنین، اگر در پایان رشته 'عمق' صفر نباشد (یعنی تعداد پرانتزهای باز و بسته برابر نباشد)، رشته نیز نامتوازن خواهد بود. این مفهوم می‌تواند به پرانتزهای مختلف (مثلاً {}، []) نیز تعمیم یابد.",
    "short_incorrect": "برای بررسی توازن پرانتزها، می‌توان تعداد پرانتزهای باز و بسته را شمرد. اگر تعداد آنها برابر بود، پرانتزها متوازن هستند. این روش بسیار سریع و کارآمد است و نیازی به استفاده از ساختارهای داده پیچیده مانند پشته ندارد.",
    "short_error_explanation": "این روش تنها تعداد پرانتزها را بررسی می‌کند و ترتیب آنها را در نظر نمی‌گیرد. برای مثال، رشته “)(” دارای تعداد مساوی پرانتز باز و بسته است، اما متوازن نیست.",
    "long_incorrect": "بررسی توازن پرانتزها به سادگی با شمارش تعداد پرانتزهای باز و بسته قابل انجام است. این روش به دلیل سرعت و سادگی خود، بسیار کارآمد است. ابتدا یک شمارنده برای پرانتزهای باز و یک شمارنده برای پرانتزهای بسته تعریف می‌کنیم. سپس، در طول پیمایش رشته، هر بار که با یک پرانتز باز مواجه شدیم، شمارنده مربوطه را افزایش می‌دهیم و هر بار که با یک پرانتز بسته مواجه شدیم، شمارنده مربوط به آن را نیز افزایش می‌دهیم. در نهایت، اگر مقادیر دو شمارنده برابر باشند، می‌توانیم با اطمینان بگوییم که رشته پرانتزی متوازن است. این روش نیازی به استفاده از پشته یا سایر ساختارهای داده پیچیده ندارد و به همین دلیل، برای بررسی رشته‌های بزرگ بسیار مناسب است.",
    "long_error_explanation": "این روش ترتیب پرانتزها را در نظر نمی‌گیرد. رشته‌ای مانند ')((' دو شمارنده برابر خواهد داشت، اما از نظر منطقی نامعتادل است. شمارش صرفاً تعداد را می‌شمارد و نه رابطه بین پرانتزها را."
}