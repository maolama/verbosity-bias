{
    "short_correct": "برای بررسی توازن پرانتزها، می‌توانیم از ساختار داده پشته (Stack) استفاده کنیم. الگوریتم به این صورت است: هنگام مشاهده پرانتز باز، آن را به پشته اضافه می‌کنیم. هنگام مشاهده پرانتز بسته، اگر پشته خالی باشد یا عنصر بالای پشته با پرانتز بسته متناظر نباشد، رشته نامتوازن است. در پایان، اگر پشته خالی باشد، رشته متوازن است؛ در غیر این صورت نامتوازن است.",
    "long_restricted": "برای بررسی متوازن بودن پرانتزها در یک رشته، می‌توانیم از ساختار داده‌ای به نام پشته (Stack) استفاده نماییم. روش کار الگوریتم بدین شکل است که ما رشته را از ابتدا تا انتها کاراکتر به کاراکتر پیمایش می‌کنیم. در این پیمایش، هر زمان که با یک پرانتز باز مواجه می‌شویم، آن را به پشته اضافه می‌نماییم. از طرفی، هنگامی که به یک پرانتز بسته برخورد می‌کنیم، ابتدا بررسی می‌کنیم که آیا پشته خالی است یا خیر. اگر پشته خالی باشد، به این معناست که پرانتز بسته بدون پرانتز باز متناظر آمده است و بنابراین رشته نامتوازن خواهد بود. در صورتی که پشته خالی نباشد، عنصر بالای پشته را بررسی می‌کنیم تا مطمئن شویم با پرانتز بسته فعلی متناظر است. اگر این تناظر وجود نداشته باشد، رشته نامتوازن محسوب می‌شود. پس از پیمایش کامل رشته، در صورتی که پشته خالی باشد، به این معناست که تمام پرانتزهای باز با پرانتزهای بسته متناظر خود جفت شده‌اند و رشته متوازن است. در غیر این صورت، اگر پشته همچنان دارای عناصر باشد، یعنی تعدادی پرانتز باز بدون پرانتز بسته متناظر وجود دارند و رشته نامتوازن خواهد بود.",
    "long_unrestricted": "برای بررسی توازن پرانتزها در یک رشته مانند \"((()()))\"، می‌توانیم از ساختار داده پشته (Stack) استفاده کنیم. این روش بسیار کارآمد است و پیچیدگی زمانی O(n) دارد که n طول رشته است. الگوریتم به صورت زیر عمل می‌کند: ابتدا یک پشته خالی ایجاد می‌کنیم. سپس رشته را کاراکتر به کاراکتر پیمایش می‌کنیم. اگر با پرانتز باز '(' مواجه شدیم، آن را به پشته اضافه می‌کنیم. اگر با پرانتز بسته ')' مواجه شدیم، ابتدا بررسی می‌کنیم که آیا پشته خالی است یا خیر. اگر پشته خالی باشد، یعنی یک پرانتز بسته بدون پرانتز باز متناظر داریم و رشته نامتوازن است. اگر پشته خالی نباشد، عنصر بالای پشته را برداشته و بررسی می‌کنیم که آیا با پرانتز بسته فعلی متناظر است. در مورد رشته‌هایی که چند نوع پرانتز مختلف دارند (مثل '(', ')', '{', '}', '[', ']')، باید تطابق نوع پرانتز را نیز بررسی کنیم. پس از پیمایش کامل رشته، اگر پشته خالی باشد، رشته متوازن است؛ در غیر این صورت نامتوازن است. این الگوریتم در حل مسائل مربوط به ویرایشگرهای کد، پردازش متن و حتی در بررسی صحت ساختار XML و JSON استفاده می‌شود.",
    "short_incorrect": "برای بررسی توازن پرانتزها، کافی است تعداد پرانتزهای باز و بسته را شمارش کنیم. اگر تعداد آنها برابر باشد، رشته متوازن است. این روش ساده و کارآمد است و نیازی به استفاده از ساختارهای داده پیچیده مانند پشته نیست. زمان اجرای الگوریتم O(n) است که n طول رشته است.",
    "short_error_explanation": "این پاسخ نادرست است زیرا فقط برابری تعداد پرانتزها کافی نیست. رشته‌ای مانند \")(\" دارای تعداد پرانتز باز و بسته برابر است، اما متوازن نیست. ترتیب پرانتزها هم مهم است و برای بررسی آن به پشته نیاز داریم.",
    "long_incorrect": "برای بررسی توازن پرانتزها در یک رشته، می‌توانیم از الگوریتمی ساده و کارآمد استفاده کنیم. ابتدا یک شمارنده تعریف می‌کنیم و آن را با صفر مقداردهی اولیه می‌کنیم. سپس رشته را از چپ به راست پیمایش کرده، برای هر پرانتز باز، شمارنده را یک واحد افزایش و برای هر پرانتز بسته، آن را یک واحد کاهش می‌دهیم. در پایان، اگر مقدار شمارنده صفر باشد، رشته متوازن است. این روش برای تمام انواع پرانتزها کاربرد دارد و حتی می‌تواند برای رشته‌هایی با انواع مختلف پرانتز (مانند پرانتز گرد، کروشه و آکولاد) با کمی تغییر استفاده شود. مزیت اصلی این روش، سادگی پیاده‌سازی و کارایی بالای آن است. پیچیدگی زمانی الگوریتم O(n) است که در آن n طول رشته است. همچنین، این روش به فضای اضافی کمی نیاز دارد و تنها از یک متغیر شمارنده استفاده می‌کند، برخلاف روش‌هایی که از ساختارهای داده اضافی مانند پشته استفاده می‌کنند. البته باید توجه داشت که در هر مرحله از پیمایش، مقدار شمارنده نباید منفی شود، زیرا این به معنای وجود پرانتز بسته بدون پرانتز باز متناظر است.",
    "long_error_explanation": "این پاسخ نادرست است زیرا روش شمارش ساده برای تشخیص توازن پرانتزها کافی نیست. رشته‌هایی مانند \")(\" یا \"())((\" با وجود برابری تعداد پرانتزها، نامتوازن هستند. بررسی منفی نشدن شمارنده ذکر شده، اما این روش برای پرانتزهای مختلف کارایی ندارد."
}