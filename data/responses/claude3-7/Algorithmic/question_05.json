{
    "short_correct": "برای حذف ایمیل‌های تکراری می‌توان از ساختار داده مجموعه (Set) استفاده کرد. ابتدا یک مجموعه خالی ایجاد کنید. سپس لیست ایمیل‌ها را پیمایش کرده و هر ایمیل را به مجموعه اضافه کنید. چون مجموعه فقط عناصر یکتا را نگه می‌دارد، ایمیل‌های تکراری خودبه‌خود حذف می‌شوند. در نهایت، مجموعه را به لیست تبدیل کنید تا لیست نهایی ایمیل‌های یکتا را داشته باشید.",
    "long_restricted": "برای حذف آدرس‌های ایمیل تکراری از یک لیست و نگهداری فقط موارد منحصر به فرد، بهترین راهکار استفاده از ساختار داده مجموعه (Set) می‌باشد. در ابتدای کار، یک مجموعه خالی ایجاد نمایید. سپس به صورت گام به گام، لیست آدرس‌های ایمیل را مورد پیمایش قرار دهید و هر آدرس ایمیل را به مجموعه ایجاد شده اضافه کنید. از آنجایی که ساختار داده مجموعه به طور ذاتی فقط عناصر یکتا را در خود نگهداری می‌کند و از ذخیره موارد تکراری جلوگیری می‌نماید، عناصر تکراری به صورت خودکار حذف خواهند شد. پس از اتمام فرآیند پیمایش و اضافه کردن تمامی آدرس‌های ایمیل به مجموعه، می‌توانید در صورت نیاز، مجموعه حاصل را مجدداً به ساختار داده لیست تبدیل نمایید. با این روش، لیست نهایی شما تنها شامل آدرس‌های ایمیل منحصر به فرد خواهد بود و هیچ آدرس تکراری در آن وجود نخواهد داشت. این الگوریتم به دلیل استفاده از ساختار داده مجموعه، از کارایی بالایی برخوردار است.",
    "long_unrestricted": "برای حذف ایمیل‌های تکراری از یک لیست، چند روش وجود دارد که هر کدام مزایا و معایب خاص خود را دارند. ساده‌ترین و کارآمدترین روش استفاده از ساختار داده مجموعه (Set) است. الگوریتم به این صورت خواهد بود:\n\n1. یک مجموعه خالی ایجاد کنید\n2. لیست ایمیل‌ها را پیمایش کنید\n3. هر ایمیل را به مجموعه اضافه کنید\n4. در نهایت، مجموعه را به لیست تبدیل کنید\n\nدر زبان پایتون، این الگوریتم به سادگی با دستور `list(set(email_list))` قابل پیاده‌سازی است. پیچیدگی زمانی این روش O(n) است که بهینه‌ترین حالت ممکن می‌باشد.\n\nروش دیگر استفاده از دیکشنری است که ایمیل‌ها را به عنوان کلید ذخیره می‌کند. همچنین می‌توان از الگوریتم‌های دستی مانند پیمایش لیست و ساخت لیست جدید با بررسی وجود هر عنصر استفاده کرد، اما این روش پیچیدگی زمانی O(n²) داشته و برای لیست‌های بزرگ کارایی ندارد.\n\nبرای حساسیت به حروف بزرگ و کوچک، می‌توان قبل از اضافه کردن به مجموعه، تمام ایمیل‌ها را به حروف کوچک تبدیل کرد. همچنین می‌توان از عملیات normalize برای استاندارد کردن فرمت ایمیل‌ها استفاده نمود.",
    "short_incorrect": "برای حذف ایمیل‌های تکراری باید از الگوریتم جستجوی دودویی استفاده کنیم. ابتدا لیست را مرتب کرده، سپس با پیمایش لیست، هر عنصر را با عنصر بعدی مقایسه می‌کنیم. اگر یکسان بودند، عنصر تکراری را حذف می‌کنیم. این روش پیچیدگی زمانی O(n log n) دارد و بهترین راه برای حذف موارد تکراری است.",
    "short_error_explanation": "جستجوی دودویی برای یافتن یک عنصر در لیست مرتب‌شده استفاده می‌شود، نه برای حذف موارد تکراری. همچنین پیچیدگی زمانی بهینه برای این مسئله O(n) است که با استفاده از ساختار داده Set قابل دستیابی است.",
    "long_incorrect": "برای حذف آدرس‌های ایمیل تکراری از یک لیست، می‌توانیم از الگوریتم هش‌سورت استفاده کنیم. در این روش، ابتدا برای هر آدرس ایمیل یک مقدار هش محاسبه می‌کنیم و سپس آن‌ها را بر اساس این مقدار هش مرتب می‌نماییم. این عملیات باعث می‌شود ایمیل‌های یکسان کنار هم قرار بگیرند. سپس با یک بار پیمایش لیست مرتب‌شده، موارد تکراری را شناسایی و حذف می‌کنیم. پیچیدگی زمانی این الگوریتم در بهترین حالت O(n) و در بدترین حالت O(n²) است، که برای لیست‌های بزرگ بسیار کارآمد است. یکی از مزیت‌های اصلی این روش، حفظ ترتیب اصلی ایمیل‌ها در لیست نهایی است. همچنین می‌توانیم با اضافه کردن یک مرحله پیش‌پردازش، تمام آدرس‌های ایمیل را به حروف کوچک تبدیل کنیم تا حساسیت به حروف بزرگ و کوچک را از بین ببریم. این الگوریتم در مقایسه با استفاده از ساختار داده درختی مانند درخت جستجوی دودویی، حافظه کمتری مصرف می‌کند و پیاده‌سازی آن ساده‌تر است. البته باید توجه داشت که تابع هش مناسب باید به گونه‌ای انتخاب شود که احتمال برخورد هش برای آدرس‌های متفاوت به حداقل برسد.",
    "long_error_explanation": "الگوریتم هش‌سورت اشتباه است و چنین الگوریتمی برای این منظور وجود ندارد. پیچیدگی زمانی ذکر شده نادرست است و مرتب‌سازی نمی‌تواند ترتیب اصلی را حفظ کند. استفاده از Set با پیچیدگی O(n) بهینه‌تر است."
}