{
    "short_correct": "فاکتوریل عدد صحیح نامنفی n (نمایش با !n) حاصلضرب تمام اعداد صحیح مثبت کوچکتر یا مساوی n است. برای محاسبه آن، می‌توان از روش بازگشتی استفاده کرد: n! = n × (n-1)! با شرط پایه 0! = 1. روش دیگر، استفاده از حلقه است که از 1 شروع کرده و تا n ادامه می‌دهد، در هر مرحله حاصلضرب را در شمارنده حلقه ضرب می‌کند.",
    "long_restricted": "فاکتوریل یک عدد صحیح نامنفی که با نماد !n نشان داده می‌شود، به معنای حاصل‌ضرب تمامی اعداد صحیح مثبت کوچکتر یا مساوی با آن عدد است. برای محاسبه فاکتوریل یک عدد، می‌توان از دو روش اصلی بهره گرفت. روش نخست، استفاده از الگوریتم بازگشتی است که در آن فاکتوریل n به صورت n! = n × (n-1)! تعریف می‌گردد، با این شرط پایانی که 0! برابر با 1 است. این روش بازگشتی به صورت مکرر خود را فراخوانی می‌کند تا به شرط پایه برسد. روش دوم که معمولاً کارآمدتر و بهینه‌تر است، استفاده از یک حلقه تکرار می‌باشد. در این روش، ابتدا یک متغیر برای نگهداری حاصل‌ضرب با مقدار اولیه 1 تعریف می‌کنیم. سپس، حلقه‌ای را از عدد 1 آغاز کرده و تا رسیدن به عدد n ادامه می‌دهیم. در هر مرحله از این حلقه، مقدار فعلی حاصل‌ضرب را در شمارنده حلقه ضرب می‌کنیم. به این ترتیب، پس از اتمام حلقه، متغیر حاصل‌ضرب، مقدار فاکتوریل عدد n را در خود خواهد داشت. این روش‌ها برای محاسبه فاکتوریل اعداد صحیح نامنفی به کار می‌روند و هر کدام مزایا و معایب خاص خود را دارند که بسته به شرایط مسئله، می‌توان از آن‌ها استفاده نمود.",
    "long_unrestricted": "فاکتوریل عدد صحیح نامنفی n، که با نماد n! نمایش داده می‌شود، حاصلضرب تمام اعداد صحیح مثبت از 1 تا n است. به عنوان مثال، 5! = 5×4×3×2×1 = 120. قرارداد ریاضی این است که 0! = 1 در نظر گرفته می‌شود. برای محاسبه فاکتوریل، دو الگوریتم اصلی وجود دارد: بازگشتی و تکراری. در روش بازگشتی، از تعریف ریاضی فاکتوریل استفاده می‌کنیم: n! = n × (n-1)! با شرط پایه 0! = 1. این الگوریتم در شبه‌کد به صورت زیر است:\n\nfunction factorial(n):\n    if n = 0 then\n        return 1\n    else\n        return n × factorial(n-1)\n\nروش تکراری از یک حلقه استفاده می‌کند و معمولاً کارآمدتر است زیرا از سربار فراخوانی‌های بازگشتی جلوگیری می‌کند:\n\nfunction factorial(n):\n    result = 1\n    for i from 1 to n:\n        result = result × i\n    return result\n\nنکته مهم این است که فاکتوریل با افزایش n به سرعت بزرگ می‌شود و می‌تواند به سرریز عددی منجر شود. برای مثال، 20! حدود 2.43×10^18 است که از محدوده بسیاری از انواع داده‌های صحیح استاندارد فراتر می‌رود. برای اعداد بزرگتر، باید از کتابخانه‌های اعداد بزرگ استفاده کرد. همچنین، الگوریتم بازگشتی برای مقادیر بزرگ n می‌تواند به سرریز پشته منجر شود، بنابراین در عمل، روش تکراری معمولاً ترجیح داده می‌شود.",
    "short_incorrect": "فاکتوریل عدد صحیح نامنفی n، حاصلضرب تمام اعداد صحیح مثبت کوچکتر یا مساوی n است. برای محاسبه آن، می‌توان از روش بازگشتی استفاده کرد: n! = n × (n-1)! با شرط پایه 1! = 1. روش دیگر استفاده از حلقه است که از 2 شروع کرده و در هر مرحله حاصلضرب را در شمارنده ضرب می‌کند.",
    "short_error_explanation": "این پاسخ دو خطا دارد: اول، شرط پایه بازگشتی باید 0! = 1 باشد، نه 1! = 1. دوم، در روش حلقه، شمارش باید از 1 شروع شود، نه از 2، زیرا فاکتوریل شامل حاصلضرب همه اعداد از 1 تا n است.",
    "long_incorrect": "فاکتوریل یک عدد صحیح نامنفی n، که با نماد n! نشان داده می‌شود، حاصلضرب تمام اعداد صحیح مثبت کوچکتر یا مساوی n است. به عنوان مثال، فاکتوریل 5 برابر است با: 5! = 5×4×3×2×1 = 120. برای محاسبه فاکتوریل، دو روش اصلی وجود دارد: روش بازگشتی و روش تکراری. در روش بازگشتی، از تعریف ریاضی فاکتوریل استفاده می‌کنیم که به صورت n! = n × (n-1)! بیان می‌شود، با این شرط پایه که 1! = 1 است. الگوریتم بازگشتی به این صورت خواهد بود: اگر n برابر 1 باشد، 1 را برگردان؛ در غیر این صورت، n را در فاکتوریل (n-1) ضرب کن. این الگوریتم ساده است اما برای مقادیر بزرگ n می‌تواند به سرریز پشته منجر شود. روش دیگر، استفاده از یک حلقه تکرار است که معمولاً کارآمدتر است. در این روش، یک متغیر برای ذخیره نتیجه با مقدار اولیه 1 ایجاد می‌کنیم. سپس یک حلقه از 2 تا n اجرا کرده و در هر مرحله، نتیجه را در شمارنده حلقه ضرب می‌کنیم. پس از اتمام حلقه، متغیر نتیجه حاوی مقدار فاکتوریل n خواهد بود. این روش از سرریز پشته جلوگیری می‌کند و برای محاسبه فاکتوریل اعداد بزرگتر مناسب‌تر است. البته باید توجه داشت که فاکتوریل اعداد بزرگ می‌تواند بسیار بزرگ شود و از محدوده متغیرهای عددی معمولی فراتر رود. در چنین مواردی، باید از کتابخانه‌های خاص برای کار با اعداد بزرگ استفاده کرد.",
    "long_error_explanation": "این پاسخ دو خطای مهم دارد: اول، شرط پایه برای الگوریتم بازگشتی باید 0! = 1 باشد، نه 1! = 1. دوم، در روش تکراری، حلقه باید از 1 شروع شود نه از 2، زیرا فاکتوریل شامل حاصلضرب همه اعداد از 1 تا n است."
}