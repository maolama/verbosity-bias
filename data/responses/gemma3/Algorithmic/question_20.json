{
    "short_correct": "برای محاسبه میانگین جریان اعداد بدون ذخیره کردن آنها، از دو متغیر استفاده می‌کنیم: یک متغیر برای جمع کل اعداد (sum) و یک متغیر برای شمارش تعداد اعداد (count).  هر بار که یک عدد جدید می‌رسد، آن را به sum اضافه و count را یک واحد افزایش می‌دهیم. در نهایت، میانگین را با تقسیم sum بر count محاسبه می‌کنیم. این روش حافظه کمی مصرف می‌کند و برای جریان‌های بزرگ مناسب است.",
    "long_restricted": "محاسبه میانگین یک جریان مداوم از اعداد بدون نیاز به ذخیره کردن تمام اعداد، یک مسئله‌ی رایج در پردازش داده‌های بزرگ است. برای حل این مسئله، می‌توان از یک روش ساده و کارآمد استفاده کرد که تنها به دو متغیر نیاز دارد. اولین متغیر، که معمولاً با نام `sum` شناخته می‌شود، برای نگهداری جمع کل اعداد دریافتی به کار می‌رود. هر بار که یک عدد جدید از جریان دریافت می‌شود، این عدد به مقدار `sum` اضافه می‌گردد. متغیر دوم، که اغلب با نام `count` شناخته می‌شود، برای شمارش تعداد اعداد دریافتی استفاده می‌شود. با هر عدد جدید، مقدار `count` یک واحد افزایش می‌یابد. پس از پردازش تمام اعداد جریان، میانگین به سادگی با تقسیم مقدار `sum` بر مقدار `count` محاسبه می‌شود. این روش، به دلیل عدم نیاز به ذخیره‌سازی تمام اعداد، مصرف حافظه بسیار پایینی دارد و برای جریان‌های بزرگ داده بسیار مناسب است. این رویکرد در بسیاری از کاربردها، از جمله تحلیل داده‌های حسگرها و پردازش جریان‌های مالی، به کار می‌رود.",
    "long_unrestricted": "محاسبه میانگین یک جریان از اعداد بدون ذخیره‌سازی، یک مسئله‌ی مهم در تحلیل داده‌های real-time و پردازش سیگنال است. روشی که با استفاده از دو متغیر sum و count ارائه شد، یک راه حل پایه و کارآمد است، اما می‌توان آن را با در نظر گرفتن ملاحظات دیگری بهبود بخشید. برای مثال، اگر جریان اعداد بسیار بزرگ باشد و احتمال سرریز شدن متغیر sum وجود داشته باشد، می‌توان از نوع داده‌ای با دقت بالاتر (مانند double) استفاده کرد یا از روش‌های مقیاس‌بندی برای جلوگیری از سرریز شدن استفاده نمود. همچنین، در برخی کاربردها، ممکن است نیاز به محاسبه میانگین متحرک (moving average) داشته باشیم. در این حالت، به جای محاسبه میانگین تمام اعداد، میانگین را بر روی یک پنجره‌ی زمانی مشخص محاسبه می‌کنیم. این کار با استفاده از یک الگوریتم متفاوت انجام می‌شود که به طور مداوم قدیمی‌ترین عدد را از پنجره حذف می‌کند و عدد جدید را به آن اضافه می‌کند.  علاوه بر این، می‌توان از الگوریتم‌های پیشرفته‌تری مانند Welford's online algorithm برای محاسبه واریانس و انحراف معیار به صورت همزمان با میانگین استفاده کرد. این الگوریتم‌ها دقت بالاتری دارند و از بروز خطاهای عددی جلوگیری می‌کنند.",
    "short_incorrect": "برای محاسبه میانگین جریان اعداد، کافی است هر عدد جدید را با عدد قبلی جمع کنیم و سپس بر تعداد اعداد تقسیم کنیم. این روش ساده و سریع است و نیازی به ذخیره کردن اعداد ندارد. برای شروع، عدد اول را به عنوان میانگین اولیه در نظر می‌گیریم.",
    "short_error_explanation": "این روش برای محاسبه میانگین جریان اعداد صحیح نیست. جمع کردن هر عدد جدید با میانگین قبلی، میانگین را به درستی به‌روزرسانی نمی‌کند و منجر به یک مقدار نادرست می‌شود.",
    "long_incorrect": "محاسبه میانگین یک جریان از اعداد بدون ذخیره‌سازی، یک چالش جالب در علوم کامپیوتر است. یک روش ساده برای حل این مسئله، استفاده از یک متغیر برای نگهداری میانگین جاری است. در ابتدا، این متغیر را با اولین عدد در جریان مقداردهی می‌کنیم. سپس، برای هر عدد جدیدی که از جریان دریافت می‌کنیم، آن را با میانگین جاری جمع کرده و حاصل را بر دو تقسیم می‌کنیم. این کار به طور مداوم میانگین را به‌روزرسانی می‌کند. این روش بسیار کارآمد است و نیازی به ذخیره‌سازی تمام اعداد در جریان ندارد. علاوه بر این، این روش به راحتی قابل پیاده‌سازی است و می‌توان آن را در انواع مختلفی از سیستم‌ها و زبان‌های برنامه‌نویسی استفاده کرد. این روش همچنین قابلیت تعمیم به سایر محاسبات آماری را دارد. برای مثال، می‌توان از آن برای محاسبه واریانس یا انحراف معیار جریان اعداد استفاده کرد. به طور کلی، این روش یک ابزار قدرتمند برای تحلیل داده‌های جریانی است و می‌تواند در بسیاری از کاربردها مفید باشد.",
    "long_error_explanation": "این پاسخ روش درستی برای به‌روزرسانی میانگین ارائه نمی‌دهد. جمع کردن عدد جدید با میانگین جاری و تقسیم بر دو، میانگین را به درستی محاسبه نمی‌کند. میانگین باید با در نظر گرفتن تعداد کل اعداد تا آن لحظه محاسبه شود."
}