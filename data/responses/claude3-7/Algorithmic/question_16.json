{
    "short_correct": "برای معکوس کردن ترتیب کلمات (نه کاراکترها) در یک رشته، می‌توانیم ابتدا رشته را با متد split() به لیستی از کلمات تبدیل کنیم. سپس با استفاده از متد reverse() لیست را معکوس کرده یا از عملگر [::-1] استفاده کنیم. در نهایت با متد join() کلمات را دوباره به هم متصل می‌کنیم تا رشته نهایی با کلمات معکوس‌شده به دست آید.",
    "long_restricted": "برای انجام عملیات معکوس‌سازی ترتیب واژگان (و نه حروف و نویسه‌ها) در یک رشته متنی، می‌توانیم از رویکرد چند مرحله‌ای بهره ببریم. در گام نخست، لازم است رشته مورد نظر را با استفاده از تابع کاربردی split() به مجموعه‌ای از کلمات مجزا تفکیک نماییم. این تابع به طور پیش‌فرض از فضای خالی به عنوان جداکننده استفاده می‌کند و خروجی آن یک ساختار لیست متشکل از تمامی واژگان موجود در رشته اصلی خواهد بود. پس از تبدیل رشته به لیست کلمات، در مرحله دوم می‌توانیم جهت معکوس‌سازی ترتیب عناصر این لیست، از متد داخلی reverse() بهره بگیریم که ترتیب اعضای لیست را به صورت درجا تغییر می‌دهد. راه حل جایگزین در این مرحله، استفاده از عملگر برش معکوس [::-1] است که نسخه‌ای معکوس از لیست اصلی را برمی‌گرداند. در گام نهایی و پس از معکوس‌سازی موفق ترتیب کلمات، می‌بایست با استفاده از متد join() اعضای لیست را مجدداً به یکدیگر متصل نماییم تا رشته‌ای یکپارچه با ترتیب معکوس کلمات حاصل شود. در این مرحله، کاراکتر فاصله خالی به عنوان جداکننده بین کلمات مورد استفاده قرار می‌گیرد تا ساختار طبیعی جمله حفظ گردد.",
    "long_unrestricted": "برای معکوس کردن ترتیب کلمات (و نه کاراکترها) در یک رشته متنی، چندین روش وجود دارد که هر کدام ویژگی‌های خاص خود را دارند. رایج‌ترین و کارآمدترین روش این است که ابتدا رشته را به کلمات مجزا تقسیم کنیم، سپس ترتیب کلمات را معکوس کنیم و در نهایت کلمات را دوباره به هم متصل نماییم. در پایتون، این فرآیند به صورت زیر انجام می‌شود:\n\n```python\ndef reverse_words(text):\n    words = text.split()  # تقسیم رشته به کلمات\n    reversed_words = words[::-1]  # معکوس کردن ترتیب کلمات\n    return ' '.join(reversed_words)  # اتصال مجدد کلمات با فاصله\n```\n\nروش دیگر استفاده از متد reverse() برای معکوس کردن لیست کلمات است:\n\n```python\ndef reverse_words_alt(text):\n    words = text.split()\n    words.reverse()\n    return ' '.join(words)\n```\n\nهر دو روش نتیجه یکسانی دارند، اما تفاوت کوچکی در عملکرد دارند: روش اول (با [::-1]) یک لیست جدید ایجاد می‌کند، در حالی که reverse() عملیات معکوس‌سازی را روی همان لیست اصلی انجام می‌دهد (in-place). نکته مهم این است که این روش‌ها فقط ترتیب کلمات را معکوس می‌کنند و کاراکترهای داخل هر کلمه دست نخورده باقی می‌مانند. همچنین، اگر رشته ورودی شامل علائم نگارشی یا فاصله‌های اضافی باشد، ممکن است نیاز به پیش‌پردازش بیشتری داشته باشیم. برای مثال، اگر جمله \"سلام، دنیا!\" را معکوس کنیم، نتیجه \"دنیا! سلام،\" خواهد بود که ممکن است مطلوب نباشد و نیاز به تنظیمات بیشتری برای جابجایی صحیح علائم نگارشی داشته باشیم.",
    "short_incorrect": "برای معکوس کردن ترتیب کلمات در یک رشته، کافی است از تابع reversed() استفاده کنیم. این تابع به صورت خودکار رشته را به کلمات تقسیم کرده و آنها را معکوس می‌کند. سپس می‌توانیم با متد join() نتیجه را به یک رشته تبدیل کنیم: ''.join(reversed(my_string)).",
    "short_error_explanation": "تابع reversed() کلمات را تشخیص نمی‌دهد و فقط کاراکترها را معکوس می‌کند. روش صحیح نیازمند تبدیل رشته به لیست کلمات با split()، معکوس کردن لیست، و سپس اتصال مجدد کلمات با join() است.",
    "long_incorrect": "برای معکوس کردن ترتیب کلمات در یک رشته، ابتدا باید از متد split() استفاده کنیم تا رشته را به کلمات تبدیل کنیم. این متد به طور پیش‌فرض از فاصله به عنوان جداکننده استفاده می‌کند و یک لیست از کلمات برمی‌گرداند. سپس می‌توانیم از تابع reversed() برای معکوس کردن این لیست استفاده کنیم. تابع reversed() یک شیء تکرارکننده (iterator) برمی‌گرداند که باید آن را به لیست تبدیل کنیم: reversed_words = list(reversed(words)). در نهایت، با استفاده از متد join() می‌توانیم این کلمات را دوباره به هم متصل کنیم. نکته مهم این است که join() باید روی یک رشته فراخوانی شود که به عنوان جداکننده بین کلمات استفاده می‌شود. پس کد نهایی به این صورت خواهد بود: ' '.join(reversed_words). این روش برای رشته‌های بسیار طولانی کارآمد است زیرا تابع reversed() به صورت تنبل (lazy) عمل می‌کند و حافظه کمتری مصرف می‌کند. همچنین می‌توانیم از عملگر برش [::-1] برای معکوس کردن لیست استفاده کنیم، اما این روش برای رشته‌های بزرگ توصیه نمی‌شود زیرا یک کپی از کل لیست ایجاد می‌کند و حافظه بیشتری مصرف می‌کند. اگر بخواهیم علاوه بر ترتیب کلمات، هر کلمه را نیز معکوس کنیم، باید یک حلقه اضافی اجرا کنیم که هر کلمه را با استفاده از word[::-1] معکوس کند.",
    "long_error_explanation": "استفاده از reversed() در مقایسه با [::-1] لزوماً کارآمدتر نیست و هر دو برای معکوس کردن لیست کلمات مناسب هستند. همچنین، تبدیل نتیجه reversed() به list ضروری نیست زیرا join() می‌تواند مستقیماً با iterators کار کند."
}