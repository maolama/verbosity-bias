{
    "short_correct": "برای بررسی برابری تعداد پرانتزهای باز و بسته با یک متغیر صحیح، می‌توانیم از یک شمارنده استفاده کنیم. ابتدا شمارنده را صفر قرار می‌دهیم. سپس رشته را پیمایش کرده، برای هر پرانتز باز، شمارنده را یک واحد افزایش و برای هر پرانتز بسته، یک واحد کاهش می‌دهیم. در پایان، اگر مقدار شمارنده صفر باشد، تعداد پرانتزهای باز و بسته برابر است.",
    "long_restricted": "برای بررسی اینکه آیا یک رشته پرانتز دارای تعداد پرانتزهای باز و بسته یکسان است، می‌توانیم از یک متغیر صحیح به عنوان شمارنده استفاده نماییم. در ابتدای کار، این شمارنده را با مقدار صفر مقداردهی اولیه می‌کنیم. سپس، رشته مورد نظر را کاراکتر به کاراکتر پیمایش می‌نماییم. در هر مرحله از این پیمایش، اگر با یک پرانتز باز مواجه شویم، شمارنده را به اندازه یک واحد افزایش می‌دهیم. در مقابل، هنگامی که به یک پرانتز بسته برخورد کنیم، شمارنده را به میزان یک واحد کاهش می‌دهیم. پس از پیمایش کامل رشته و بررسی تک تک کاراکترها، به بررسی مقدار نهایی شمارنده می‌پردازیم. اگر مقدار نهایی شمارنده برابر با صفر باشد، این بدان معناست که تعداد پرانتزهای باز و بسته در رشته مورد بررسی دقیقاً با یکدیگر برابر است. در غیر این صورت، یعنی اگر مقدار شمارنده مثبت یا منفی باشد، به این معناست که تعداد پرانتزهای باز و بسته یکسان نیست. لازم به ذکر است که این روش فقط برابری تعداد را بررسی می‌کند و به معتبر بودن ترتیب پرانتزها کاری ندارد.",
    "long_unrestricted": "برای بررسی برابری تعداد پرانتزهای باز و بسته در یک رشته با استفاده از تنها یک متغیر صحیح، می‌توانیم از یک الگوریتم ساده و کارآمد استفاده کنیم. این روش فقط تعداد برابر پرانتزها را بررسی می‌کند، نه توازن یا معتبر بودن آنها را. الگوریتم به این صورت است: یک متغیر شمارنده با مقدار اولیه صفر تعریف می‌کنیم. رشته را از ابتدا تا انتها پیمایش می‌کنیم. هر زمان که به پرانتز باز '(' برخورد کردیم، شمارنده را یک واحد افزایش می‌دهیم. هر زمان که به پرانتز بسته ')' برخورد کردیم، شمارنده را یک واحد کاهش می‌دهیم. پس از پایان پیمایش، اگر مقدار شمارنده صفر باشد، تعداد پرانتزهای باز و بسته برابر است. برای مثال، در رشته \"())(\" ابتدا شمارنده 0 است. با دیدن '(' می‌شود 1، با دیدن ')' می‌شود 0، با دیدن ')' می‌شود -1 و با دیدن '(' می‌شود 0. پس تعداد پرانتزها برابر است. توجه کنید که این روش فقط برابری تعداد را بررسی می‌کند و رشته‌هایی مانند \")(\" را نیز دارای تعداد برابر تشخیص می‌دهد، هرچند این رشته از نظر ساختاری متوازن نیست. پیچیدگی زمانی این الگوریتم O(n) و پیچیدگی فضایی آن O(1) است که آن را بسیار کارآمد می‌سازد.",
    "short_incorrect": "برای بررسی برابری تعداد پرانتزهای باز و بسته، باید رشته را دو بار پیمایش کنیم. ابتدا تعداد پرانتزهای باز را شمرده و سپس تعداد پرانتزهای بسته را. اگر این دو عدد برابر باشند، تعداد پرانتزها یکسان است. این روش به دو متغیر صحیح نیاز دارد اما می‌توان آن را به یک متغیر کاهش داد.",
    "short_error_explanation": "این پاسخ نادرست است زیرا نیازی به دو بار پیمایش رشته نیست و می‌توان با یک بار پیمایش و تنها یک متغیر شمارنده به نتیجه رسید. همچنین روش پیشنهادی به دو متغیر نیاز دارد، نه یک متغیر.",
    "long_incorrect": "برای بررسی برابری تعداد پرانتزهای باز و بسته در یک رشته با استفاده از یک متغیر صحیح، می‌توانیم از روش زیر استفاده کنیم. یک متغیر شمارنده با مقدار اولیه صفر تعریف می‌کنیم. سپس رشته را از ابتدا تا انتها پیمایش می‌کنیم. برای هر پرانتز باز '(', شمارنده را دو برابر می‌کنیم و سپس یک واحد به آن اضافه می‌کنیم. برای هر پرانتز بسته ')', شمارنده را دو برابر کرده و سپس یک واحد از آن کم می‌کنیم. در پایان، اگر مقدار شمارنده صفر باشد، تعداد پرانتزهای باز و بسته برابر است. این روش بسیار هوشمندانه است زیرا اطلاعات مربوط به هر دو نوع پرانتز را در یک متغیر ذخیره می‌کند. با این روش، حتی می‌توانیم تشخیص دهیم که آیا رشته پرانتزها متوازن است یا خیر. اگر در هر مرحله شمارنده منفی شود، یعنی تعداد پرانتزهای بسته از باز بیشتر شده و رشته نامتوازن است. این الگوریتم با پیچیدگی زمانی O(n) و پیچیدگی فضایی O(1) بسیار کارآمد است و می‌تواند برای رشته‌های بزرگ نیز استفاده شود.",
    "long_error_explanation": "این پاسخ نادرست است. روش پیشنهادی با دو برابر کردن و اضافه/کم کردن یک واحد کار نمی‌کند و نمی‌تواند برابری تعداد پرانتزها را به درستی تشخیص دهد. همچنین ادعای تشخیص توازن پرانتزها با این روش نادرست است."
}