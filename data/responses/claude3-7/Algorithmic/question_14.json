{
    "short_correct": "برای یافتن عناصر مشترک بین دو لیست، می‌توان از روش‌های مختلفی استفاده کرد. ساده‌ترین روش، پیمایش یکی از لیست‌ها و بررسی وجود هر عنصر در لیست دیگر است. روش کارآمدتر، تبدیل یکی از لیست‌ها به مجموعه (set) و سپس بررسی عضویت عناصر لیست دیگر در این مجموعه است. همچنین می‌توان از عملیات اشتراک مجموعه‌ها استفاده کرد.",
    "long_restricted": "برای پیدا کردن عناصر مشترک میان دو لیست، روش‌های گوناگونی قابل استفاده است. یکی از ساده‌ترین راهکارها، بررسی تک به تک عناصر لیست اول و جستجوی آنها در لیست دوم می‌باشد. در این شیوه، هر عنصر از لیست نخست را پیمایش کرده و وجود آن را در لیست دیگر بررسی می‌نماییم. روشی که از نظر کارایی بهینه‌تر است، تبدیل یکی از این دو لیست به ساختار داده‌ای به نام مجموعه (set) است. پس از این تبدیل، می‌توانیم با سرعت بیشتری عضویت هر یک از عناصر لیست دیگر را در این مجموعه مورد آزمون قرار دهیم. این روش به دلیل سرعت بالای جستجو در مجموعه‌ها، کارآمدی بیشتری دارد. راهکار دیگری که می‌توان از آن بهره گرفت، استفاده مستقیم از عملیات اشتراک بین مجموعه‌هاست. در این روش، هر دو لیست را به مجموعه تبدیل کرده و سپس با استفاده از عملگر اشتراک، عناصر مشترک بین آنها را استخراج می‌کنیم. این شیوه‌ها امکان یافتن عناصر مشترک بین دو لیست را فراهم می‌آورند.",
    "long_unrestricted": "برای یافتن عناصر مشترک بین دو لیست، چندین روش با کارایی‌های متفاوت وجود دارد. در ادامه این روش‌ها را از ساده تا بهینه بررسی می‌کنیم.\n\n1. روش حلقه‌های تودرتو: در این روش، برای هر عنصر از لیست اول، کل لیست دوم را جستجو می‌کنیم. پیچیدگی زمانی این روش O(n×m) است که n و m طول لیست‌ها هستند:\n\ndef find_common_elements(list1, list2):\n    common = []\n    for item in list1:\n        if item in list2 and item not in common:\n            common.append(item)\n    return common\n\n2. روش مبتنی بر مجموعه‌ها: تبدیل یکی از لیست‌ها به مجموعه و بررسی عضویت عناصر لیست دیگر در آن. پیچیدگی زمانی این روش O(n+m) است:\n\ndef find_common_elements(list1, list2):\n    set2 = set(list2)\n    return [item for item in list1 if item in set2]\n\n3. روش اشتراک مجموعه‌ها: ساده‌ترین و کارآمدترین روش، استفاده از عملگر اشتراک مجموعه‌هاست:\n\ndef find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nنکته مهم: اگر ترتیب عناصر یا تکرار آنها مهم باشد، باید پس از یافتن عناصر مشترک، پردازش‌های اضافی انجام دهیم. همچنین، اگر لیست‌ها بسیار بزرگ باشند، روش‌های مبتنی بر مجموعه کارآمدتر هستند.",
    "short_incorrect": "برای یافتن عناصر مشترک بین دو لیست، بهترین روش مرتب‌سازی هر دو لیست و سپس مقایسه آنهاست. این روش همیشه پیچیدگی زمانی O(n) دارد و نیازی به استفاده از ساختارهای داده اضافی نیست. مرتب‌سازی باعث می‌شود عناصر تکراری کنار هم قرار گیرند.",
    "short_error_explanation": "این پاسخ نادرست است زیرا مرتب‌سازی دو لیست پیچیدگی O(n log n) دارد، نه O(n). همچنین، پس از مرتب‌سازی نیز برای یافتن عناصر مشترک باید الگوریتم دیگری اجرا شود که پیچیدگی اضافی دارد.",
    "long_incorrect": "برای یافتن عناصر مشترک بین دو لیست، یکی از کارآمدترین روش‌ها استفاده از الگوریتم مرتب‌سازی و سپس ادغام است. ابتدا هر دو لیست را با الگوریتم‌های کارآمدی مانند کوییک‌سورت مرتب می‌کنیم که پیچیدگی O(n log n) دارد. سپس با یک پیمایش خطی و استفاده از دو اشاره‌گر، عناصر مشترک را شناسایی می‌کنیم. این روش از نظر حافظه بسیار بهینه است زیرا نیازی به ساختار داده اضافی ندارد. روش دیگر استفاده از هش‌مپ است که اگرچه سریع است، اما حافظه بیشتری مصرف می‌کند. در این روش، برای هر عنصر در لیست اول، یک شمارنده در هش‌مپ ایجاد می‌کنیم. سپس لیست دوم را پیمایش کرده و هر عنصری که در هش‌مپ موجود باشد و شمارنده آن مثبت باشد، یک عنصر مشترک است. این روش برای لیست‌های نامرتب بهینه‌تر است. نکته مهم این است که برای حفظ ترتیب عناصر مشترک بر اساس ترتیب اصلی آنها در لیست اول، باید از یک لیست کمکی استفاده کنیم.",
    "long_error_explanation": "این پاسخ چند خطا دارد: اول، پس از مرتب‌سازی، ترتیب اصلی عناصر از بین می‌رود و نمی‌توان ترتیب اولیه را بازیابی کرد. دوم، روش هش‌مپ توصیف شده برای شمارش است نه یافتن عناصر مشترک ساده. روش مجموعه‌ها (set) که ساده‌تر و کارآمدتر است، اصلاً ذکر نشده است."
}