{
    "short_correct": "برای پیدا کردن طولانی‌ترین پیشوند مشترک دو رشته، ابتدا رشته‌ها را از ابتدا کاراکتر به کاراکتر مقایسه می‌کنیم. تا زمانی که کاراکترهای متناظر در هر دو رشته یکسان باشند، به پیشوند مشترک اضافه می‌کنیم. به محض برخورد با اولین کاراکتر متفاوت، فرآیند را متوقف کرده و پیشوند جمع‌آوری شده تا آن نقطه را به عنوان طولانی‌ترین پیشوند مشترک برمی‌گردانیم.",
    "long_restricted": "برای یافتن طولانی‌ترین پیشوند مشترک بین دو رشته متنی، باید فرآیند مقایسه کاراکتر به کاراکتر را از ابتدای هر دو رشته آغاز نماییم. در این روش، به صورت متوالی و گام به گام، کاراکترهای متناظر در موقعیت‌های یکسان از هر دو رشته را با یکدیگر مقایسه می‌کنیم. تا زمانی که کاراکترهای هم‌موقعیت در هر دو رشته کاملاً مشابه و یکسان باشند، آن‌ها را به عنوان بخشی از پیشوند مشترک در نظر گرفته و به مجموعه پیشوند اضافه می‌نماییم. این روند مقایسه و افزودن به پیشوند مشترک را ادامه می‌دهیم تا زمانی که به اولین جفت کاراکتر متفاوت در دو رشته برخورد کنیم. در این نقطه، فرآیند مقایسه را متوقف می‌سازیم. سپس، تمام کاراکترهایی که تا قبل از این نقطه جمع‌آوری کرده‌ایم را به عنوان طولانی‌ترین پیشوند مشترک بین دو رشته اصلی معرفی می‌کنیم. این پیشوند، بزرگترین بخش آغازین مشترک بین دو رشته مورد بررسی خواهد بود که کاراکترهای آن در هر دو رشته دقیقاً یکسان هستند.",
    "long_unrestricted": "برای یافتن طولانی‌ترین پیشوند مشترک بین دو رشته، چندین روش وجود دارد که رایج‌ترین آن‌ها مقایسه کاراکتر به کاراکتر است. در این روش، از ابتدای هر دو رشته شروع کرده و کاراکترهای متناظر را مقایسه می‌کنیم. تا زمانی که کاراکترها یکسان هستند، آن‌ها را به پیشوند مشترک اضافه می‌کنیم و به محض مشاهده اولین اختلاف، فرآیند را متوقف می‌کنیم. این الگوریتم دارای پیچیدگی زمانی O(min(n,m)) است، که n و m طول دو رشته هستند. مثلاً برای رشته‌های \"programming\" و \"programmer\"، طولانی‌ترین پیشوند مشترک \"programm\" خواهد بود. در پیاده‌سازی عملی، می‌توان از یک حلقه استفاده کرد که تا کوچکترین طول دو رشته ادامه یابد. همچنین می‌توان این مفهوم را به بیش از دو رشته گسترش داد و طولانی‌ترین پیشوند مشترک بین چندین رشته را محاسبه کرد. در این حالت، می‌توان از روش‌های بهینه‌تری مانند درخت پیشوندی (Trie) استفاده کرد که برای کاربردهایی مانند جستجوی خودکار و تکمیل خودکار متن بسیار مفید است.",
    "short_incorrect": "برای پیدا کردن طولانی‌ترین پیشوند مشترک دو رشته، می‌توانیم از الگوریتم جستجوی دودویی استفاده کنیم. ابتدا هر دو رشته را مرتب‌سازی کرده، سپس با مقایسه از انتها به ابتدا، کاراکترهای مشترک را شناسایی می‌کنیم. این روش با پیچیدگی O(log n) بسیار کارآمد است و در سیستم‌های جستجوی متنی پیشرفته استفاده می‌شود.",
    "short_error_explanation": "این پاسخ چندین خطا دارد: مرتب‌سازی رشته‌ها باعث از بین رفتن ترتیب اصلی کاراکترها می‌شود که برای پیشوند ضروری است. مقایسه از انتها نادرست است چون پیشوند از ابتدا شروع می‌شود. الگوریتم جستجوی دودویی برای این مسئله نامناسب است و پیچیدگی O(log n) نیز غیردقیق است.",
    "long_incorrect": "برای یافتن طولانی‌ترین پیشوند مشترک بین دو رشته، می‌توانیم از الگوریتم پویا (Dynamic Programming) استفاده کنیم. ابتدا یک ماتریس دو بعدی به ابعاد طول رشته اول و دوم ایجاد می‌کنیم. سپس با پر کردن این ماتریس از پایین به بالا، طول زیررشته‌های مشترک در هر موقعیت را محاسبه می‌کنیم. بزرگترین عدد در ردیف اول ماتریس نشان‌دهنده طول طولانی‌ترین پیشوند مشترک خواهد بود. این روش دارای پیچیدگی زمانی O(n×m) است که برای رشته‌های بسیار بلند مناسب است. مزیت اصلی این روش این است که می‌تواند پیشوندهای مشترک را حتی در صورت وجود خطاهای تایپی یا جایگزینی کاراکترها شناسایی کند. همچنین، این الگوریتم قابلیت توسعه برای یافتن طولانی‌ترین پیشوند مشترک بین چندین رشته را دارد. در پیاده‌سازی عملی، می‌توان از تکنیک‌های بهینه‌سازی حافظه استفاده کرد و تنها دو ردیف از ماتریس را در هر زمان نگه داشت. این روش در سیستم‌های پردازش زبان طبیعی، جستجوی ژنومی و سیستم‌های پیشنهاددهنده کاربرد فراوانی دارد.",
    "long_error_explanation": "این پاسخ اشتباهات مفهومی جدی دارد. الگوریتم برنامه‌نویسی پویا توصیف شده برای یافتن زیررشته مشترک (LCS) مناسب است، نه پیشوند مشترک. استفاده از ماتریس و بررسی ردیف اول برای پیشوند نادرست است. همچنین، پیشوند مشترک نمی‌تواند خطاهای تایپی یا جایگزینی را تحمل کند."
}